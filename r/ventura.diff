diff --git a/src/library/grDevices/src/devQuartz.c b/src/library/grDevices/src/devQuartz.c
index 2ae5bfe..9a0ed69 100644
--- a/src/library/grDevices/src/devQuartz.c
+++ b/src/library/grDevices/src/devQuartz.c
@@ -558,10 +558,10 @@ extern CGFontRef CGContextGetFont(CGContextRef);
 
 #pragma mark Quartz Font Cache
 
-/* Font lookup is expesive yet frequent. Therefore we cache all used ATS fonts (which are global to the app). */
+/* Font lookup is expesive yet frequent. Therefore we cache all used CG fonts (which are global to the app). */
 
 typedef struct font_cache_entry_s {
-    ATSFontRef font;
+    CGFontRef font;
     char *family;
     int  face;
 } font_cache_entry_t;
@@ -576,7 +576,7 @@ typedef struct font_cache_s {
 
 font_cache_t font_cache, *font_cache_tail = &font_cache;
 
-static ATSFontRef RQuartz_CacheGetFont(const char *family, int face) {
+static CGFontRef RQuartz_CacheGetFont(const char *family, int face) {
     font_cache_t *fc = &font_cache;
     while (fc) {
         int i = 0, j = fc->fonts;
@@ -590,7 +590,7 @@ static ATSFontRef RQuartz_CacheGetFont(const char *family, int face) {
     return 0;
 }
 
-static void RQuartz_CacheAddFont(const char *family, int face, ATSFontRef font) {
+static void RQuartz_CacheAddFont(const char *family, int face, CGFontRef font) {
     if (font_cache_tail->fonts >= max_fonts_per_block)
         font_cache_tail = font_cache_tail->next = (font_cache_t*) calloc(1, sizeof(font_cache_t));
     {
@@ -646,7 +646,7 @@ const char *RQuartz_LookUpFontName(int fontface, const char *fontfamily)
 CGFontRef RQuartz_Font(CTXDESC)
 {
     const char *fontName = NULL, *fontFamily = gc->fontfamily;
-    ATSFontRef atsFont = 0;
+    CGFontRef cgFont = 0;
     int fontFace = gc->fontface;
     if (fontFace < 1 || fontFace > 5) fontFace = 1; /* just being paranoid */
     if (fontFace == 5)
@@ -654,56 +654,53 @@ CGFontRef RQuartz_Font(CTXDESC)
     else
         fontName = RQuartz_LookUpFontName(fontFace, fontFamily[0] ? fontFamily : "default");
     if (fontName) {
-        atsFont = RQuartz_CacheGetFont(fontName, 0); /* face is 0 because we are passing a true font name */
-        if (!atsFont) { /* not in the cache, get it */
+        cgFont = RQuartz_CacheGetFont(fontName, 0); /* face is 0 because we are passing a true font name */
+        if (!cgFont) { /* not in the cache, get it */
             CFStringRef cfFontName = CFStringCreateWithCString(NULL, fontName, kCFStringEncodingUTF8);
 	    /* ATSFontFindFromName and ATSFontFindFromPostScriptName
 	     * are unavailable with the macOS 13 SDK when targetting
 	     * macOS 13.  They will be removed for macOS 14, according to
 	     * https://developer.apple.com/documentation/macos-release-notes/macos-13-release-notes */
-            atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
-            if (!atsFont)
-                atsFont = ATSFontFindFromPostScriptName(cfFontName, kATSOptionFlagsDefault);
+            cgFont = CGFontCreateWithFontName(cfFontName);
             CFRelease(cfFontName);
-            if (!atsFont) {
+            if (!cgFont) {
                 warning(_("font \"%s\" could not be found for family \"%s\""), fontName, fontFamily);
                 return NULL;
             }
-            RQuartz_CacheAddFont(fontName, 0, atsFont);
+            RQuartz_CacheAddFont(fontName, 0, cgFont);
         }
     } else { /* the real font name could not be looked up. We must use cache and/or find the right font by family and face */
-        if (!fontFamily[0]) fontFamily = "Arial"; 
-	/* Arial is the default, because Helvetica doesn't have Oblique 
+        if (!fontFamily[0]) fontFamily = "Arial";
+	/* Arial is the default, because Helvetica doesn't have Oblique
 	   on 10.4 - maybe change later? */
-        atsFont = RQuartz_CacheGetFont(fontFamily, fontFace);
-        if (!atsFont) { /* not in the cache? Then we need to find the 
+        cgFont = RQuartz_CacheGetFont(fontFamily, fontFace);
+        if (!cgFont) { /* not in the cache? Then we need to find the
 			   proper font name from the family name and face */
-            /* as it turns out kATSFontFilterSelectorFontFamily is not 
-	       implemented in macOS (!!) so there is no way to query for a 
-	       font from a specific family. Therefore we have to use 
+            /* as it turns out kATSFontFilterSelectorFontFamily is not
+	       implemented in macOS (!!) so there is no way to query for a
+	       font from a specific family. Therefore we have to use
 	       text-matching heuristics ... very nasty ... */
             char compositeFontName[256];
             /* CFStringRef cfFontName; */
             if (strlen(fontFamily) > 210) error(_("font family name is too long"));
-            while (!atsFont) { /* try different faces until exhausted or successful */
+            while (!cgFont) { /* try different faces until exhausted or successful */
                 strcpy(compositeFontName, fontFamily);
                 if (fontFace == 2 || fontFace == 4) strcat(compositeFontName, " Bold");
                 if (fontFace == 3 || fontFace == 4) strcat(compositeFontName, " Italic");
                 CFStringRef cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);
-                atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
-                if (!atsFont) atsFont = ATSFontFindFromPostScriptName(cfFontName, kATSOptionFlagsDefault);
+                cgFont = CGFontCreateWithFontName(cfFontName);
                 CFRelease(cfFontName);
-                if (!atsFont) {
+                if (!cgFont) {
                     if (fontFace == 1) { /* more guessing - fontFace == 1 may need Regular or Roman */
                         strcat(compositeFontName," Regular");
                         cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);
-                        atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
+                        cgFont = CGFontCreateWithFontName(cfFontName);
                         CFRelease(cfFontName);
-                        if (!atsFont) {
+                        if (!cgFont) {
                             strcpy(compositeFontName, fontFamily);
                             strcat(compositeFontName," Roman");
                             cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);
-                            atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
+                            cgFont = CGFontCreateWithFontName(cfFontName);
                             CFRelease(cfFontName);
                         }
                     } else if (fontFace == 3 || fontFace == 4) { /* Oblique is sometimes used instead of Italic (e.g. in Helvetica) */
@@ -711,26 +708,26 @@ CGFontRef RQuartz_Font(CTXDESC)
                         if (fontFace == 4) strcat(compositeFontName, " Bold");
                         strcat(compositeFontName," Oblique");
                         cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);
-                        atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
-                        CFRelease(cfFontName);                    
+                        cgFont = CGFontCreateWithFontName(cfFontName);
+                        CFRelease(cfFontName);
                     }
                 }
-                if (!atsFont) { /* try to fall back to a more plain face */
+                if (!cgFont) { /* try to fall back to a more plain face */
                     if (fontFace == 4) fontFace = 2;
                     else if (fontFace != 1) fontFace = 1;
                     else break;
-                    atsFont = RQuartz_CacheGetFont(fontFamily, fontFace);
-                    if (atsFont) break;
+                    cgFont = RQuartz_CacheGetFont(fontFamily, fontFace);
+                    if (cgFont) break;
                 }
             }
-            if (!atsFont)
+            if (!cgFont)
                 warning(_("no font could be found for family \"%s\""), fontFamily);
             else
-                RQuartz_CacheAddFont(fontFamily, fontFace, atsFont);
+                RQuartz_CacheAddFont(fontFamily, fontFace, cgFont);
         }
     }
 
-    return CGFontCreateWithPlatformFont(&atsFont);
+    return cgFont;
 }
 
 #define RQUARTZ_FILL   (1)
@@ -743,6 +740,7 @@ static void RQuartz_SetFont(CGContextRef ctx, const pGEcontext gc, QuartzDesc *x
         CGContextSetFont(ctx, font);
         if (font != xd->font) {
             if (xd->font) CGFontRelease(xd->font);
+            CGFontRetain(font);
             xd->font = font;
         }
     }
@@ -758,9 +756,9 @@ void RQuartz_Set(CGContextRef ctx,const pGEcontext gc,int flags) {
     CGColorSpaceRef cs = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
     if(flags & RQUARTZ_FILL) {
         int fill = gc->fill;
-        CGFloat fillColor[] = { R_RED(fill)/255.0, 
-                                R_GREEN(fill)/255.0, 
-                                R_BLUE(fill)/255.0, 
+        CGFloat fillColor[] = { R_RED(fill)/255.0,
+                                R_GREEN(fill)/255.0,
+                                R_BLUE(fill)/255.0,
                                 R_ALPHA(fill)/255.0 };
         CGColorRef fillColorRef = CGColorCreate(cs, fillColor);
         CGContextSetFillColorWithColor(ctx, fillColorRef);
@@ -768,9 +766,9 @@ void RQuartz_Set(CGContextRef ctx,const pGEcontext gc,int flags) {
     }
     if(flags & RQUARTZ_STROKE) {
         int stroke = gc->col;
-        CGFloat strokeColor[] = { R_RED(stroke)/255.0, 
-                                  R_GREEN(stroke)/255.0, 
-                                  R_BLUE(stroke)/255.0, 
+        CGFloat strokeColor[] = { R_RED(stroke)/255.0,
+                                  R_GREEN(stroke)/255.0,
+                                  R_BLUE(stroke)/255.0,
                                   R_ALPHA(stroke)/255.0 };
         CGColorRef strokeColorRef = CGColorCreate(cs, strokeColor);
         CGContextSetStrokeColorWithColor(ctx, strokeColorRef);
@@ -924,7 +922,7 @@ static CFStringRef text2unichar(CTXDESC, const char *text, UniChar **buffer, int
         str = CFStringCreateWithCString(NULL, text, kCFStringEncodingMacSymbol);
     else {
         str = CFStringCreateWithCString(NULL, text, kCFStringEncodingUTF8);
-        /* Try fallback Latin1 encoding if UTF8 doesn't work 
+        /* Try fallback Latin1 encoding if UTF8 doesn't work
 	   -- should no longer be needed. */
         if(!str)
             CFStringCreateWithCString(NULL, text, kCFStringEncodingISOLatin1);
@@ -1050,9 +1048,9 @@ static void RQuartz_Rect(double x0, double y0, double x1, double y1, CTXDESC)
 }
 
 static void RQuartz_Raster(unsigned int *raster, int w, int h,
-                           double x, double y, 
+                           double x, double y,
                            double width, double height,
-                           double rot, 
+                           double rot,
                            Rboolean interpolate,
                            const pGEcontext gc, pDevDesc dd)
 {
@@ -1061,14 +1059,14 @@ static void RQuartz_Raster(unsigned int *raster, int w, int h,
     CGDataProviderRef dp;
     CGColorSpaceRef cs;
     CGImageRef img;
-    
+
     /* Create a "data provider" containing the raster data */
     dp = CGDataProviderCreateWithData(NULL, (void *) raster, 4*w*h, NULL);
 
     cs = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
 
     /* Create a quartz image from the data provider */
-    img = CGImageCreate(w, h, 
+    img = CGImageCreate(w, h,
                         8,   /* bits per channel */
                         32,  /* bits per pixel */
                         4*w, /* bytes per row */
@@ -1119,7 +1117,7 @@ static SEXP RQuartz_Cap(pDevDesc dd)
     DRAWSPEC;
     if (!ctx) NOCTXR(raster);
 
-    if (xd->cap) 
+    if (xd->cap)
         raster = (SEXP) xd->cap(xd, xd->userInfo);
 
     return raster;
@@ -1157,7 +1155,7 @@ static void RQuartz_Polyline(int n, double *x, double *y, CTXDESC)
 
     /* CGContextStrokeLineSegments turned out to be a bad idea due to
        Leopard restarting dashes for each segment.
-       CGContextAddLineToPoint is fast enough. 
+       CGContextAddLineToPoint is fast enough.
        R < 4.2.0 broke up paths of more than 100 points, but that
        causes issues with dashing since the phase is reset for all
        subpaths, e.g: plot(log10(1:1e4), lty = 2, type="l")
@@ -1186,7 +1184,7 @@ static void RQuartz_Polygon(int n, double *x, double *y, CTXDESC)
     CGContextDrawPath(ctx, kCGPathFillStroke);
 }
 
-static void RQuartz_Path(double *x, double *y, 
+static void RQuartz_Path(double *x, double *y,
                          int npoly, int* nper,
                          Rboolean winding,
                          CTXDESC)
@@ -1297,7 +1295,7 @@ static SEXP RQuartz_setPattern(SEXP pattern, pDevDesc dd) {
     return R_NilValue;
 }
 
-static void RQuartz_releasePattern(SEXP ref, pDevDesc dd) {} 
+static void RQuartz_releasePattern(SEXP ref, pDevDesc dd) {}
 
 static SEXP RQuartz_setClipPath(SEXP path, SEXP ref, pDevDesc dd) {
     return R_NilValue;
@@ -1320,7 +1318,7 @@ static void RQuartz_releaseMask(SEXP ref, pDevDesc dd) {}
 /* disabled for now until we get to test in on 10.3 #include "qdCarbon.h" */
 
 /* current fake */
-QuartzDesc_t 
+QuartzDesc_t
 QuartzCarbon_DeviceCreate(pDevDesc dd, QuartzFunctions_t *fn, QuartzParameters_t *par)
 {
     return NULL;
@@ -1329,9 +1327,9 @@ QuartzCarbon_DeviceCreate(pDevDesc dd, QuartzFunctions_t *fn, QuartzParameters_t
 #define ARG(HOW,WHAT) HOW(CAR(WHAT));WHAT = CDR(WHAT)
 
 /* C version of the Quartz call (experimental)
-   Quartz descriptor on success, NULL on failure. 
+   Quartz descriptor on success, NULL on failure.
    If errorCode is not NULL, it will contain the error code on exit */
-QuartzDesc_t 
+QuartzDesc_t
 Quartz_C(QuartzParameters_t *par, quartz_create_fn_t q_create, int *errorCode)
 {
     if (!q_create || !par) {
@@ -1394,7 +1392,7 @@ SEXP Quartz(SEXP args)
     args = CDR(args);
     /* we may want to support connections at some point, but not yet ... */
     tmps = CAR(args);    args = CDR(args);
-    if (isNull(tmps)) 
+    if (isNull(tmps))
 	file = NULL;
     else if (isString(tmps) && LENGTH(tmps) >= 1) {
         const char *tmp = R_ExpandFileName(CHAR(STRING_ELT(tmps, 0)));
@@ -1509,7 +1507,7 @@ SEXP Quartz(SEXP args)
 	    error(_("unable to create quartz() device target, given type may not be supported"));
 	}
 	const char *devname = "quartz_off_screen";
-	if(streql(type, "") || streql(type, "native") || streql(type, "cocoa") 
+	if(streql(type, "") || streql(type, "native") || streql(type, "cocoa")
 	   || streql(type, "carbon")) devname = "quartz";
 	SEXP f = PROTECT(mkString(devname));
 	if(file) setAttrib(f, install("filepath"), mkString(file));
@@ -1577,14 +1575,14 @@ static int has_wss() {
 	    mach_msg_type_number_t  serverNameCount;
 	    bool_array_t            active;
 	    mach_msg_type_number_t  activeCount;
-	    
+
 	    serviceNames  = NULL;
 	    serverNames   = NULL;
 	    active        = NULL;
-	    
-	    kr = bootstrap_info(bport, 
-				&serviceNames, &serviceNameCount, 
-				&serverNames, &serverNameCount, 
+
+	    kr = bootstrap_info(bport,
+				&serviceNames, &serviceNameCount,
+				&serverNames, &serverNameCount,
 				&active, &activeCount);
 	    if (kr == KERN_SUCCESS) {
 		unsigned int i = 0;
@@ -1601,13 +1599,13 @@ static int has_wss() {
 	    mach_port_deallocate(mach_task_self(), bport);
     } else {
 	/* On macOS 10.7 (Lion) and higher two things changed:
-	   a) there is no com.apple.windowserver.session anymore 
+	   a) there is no com.apple.windowserver.session anymore
 	   so the above will fail
-	   b) every process has now the full bootstrap info, 
-	   so in fact even remote connections will be able to 
+	   b) every process has now the full bootstrap info,
+	   so in fact even remote connections will be able to
 	   run on-screen tasks if the user is logged in
-	   So we need to add some heuristics to decide when the user 
-	   actually wants Quartz ... */   
+	   So we need to add some heuristics to decide when the user
+	   actually wants Quartz ... */
 	/* check user's session */
 	CFDictionaryRef dict = CGSessionCopyCurrentDictionary();
 	if (dict) { /* allright, let's see if the session is current */
@@ -1644,7 +1642,7 @@ SEXP makeQuartzDefault(void) {
     return ScalarLogical(FALSE);
 }
 
-QuartzDesc_t 
+QuartzDesc_t
 Quartz_C(QuartzParameters_t *par, quartz_create_fn_t q_create, int *errorCode)
 {
     if (errorCode) errorCode[0] = -1;
