From 9715cfb94d761aacdc24a0532aeb1d6df7529e67 Mon Sep 17 00:00:00 2001
From: Andy Nichols <andy.nichols@qt.io>
Date: Thu, 25 Nov 2021 12:56:33 +0100
Subject: [PATCH] Update assimp to version 5.1.1
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Assimp finally had a decent release which we can support as a system
version where possible.

For the system assimp dependency we have to check for >= 5.1 and not >=
5.1.1 because the cmake files released did not define the patch release
number correctly.  So while we don't support 5.1.0 (5.1.1 contains a
patch specifically for Qt), the configure test will fail if you try and
build with 5.1.0, so this should be fine.

Change-Id: Ie7bf849d9e53ea1eb10f9099f235b18c2f52caf0
Reviewed-by: Christian Str√∏mme <christian.stromme@qt.io>

Homebrew edit: backported to 6.2.
---
 config.tests/quick3d_assimp/main.cpp          |   1 +
 src/3rdparty/assimp/assimp.pri                | 432 ------------------
 src/3rdparty/assimp/config.h                  |  37 +-
 src/3rdparty/assimp/qt_attribution.json       |   4 +-
 src/3rdparty/assimp/revision.h                |   4 +-
 .../assetimporters/assimp/CMakeLists.txt      |   1 -
 .../assetimporters/assimp/assimpimporter.cpp  | 207 ++++-----
 .../assimp/assimpimporter_rt.cpp              | 126 +++--
 .../assetimporters/assimp/assimputils.cpp     |   1 -
 src/plugins/assetimporters/configure.cmake    |   4 +-
 10 files changed, 188 insertions(+), 629 deletions(-)
 delete mode 100644 src/3rdparty/assimp/assimp.pri

diff --git a/config.tests/quick3d_assimp/main.cpp b/config.tests/quick3d_assimp/main.cpp
index 7636f62f2a84cfdefed47d3d3fcf74e8760d7146..d04289317b5888b58f89f99260cf84be0f1c8e1c 100644
--- a/config.tests/quick3d_assimp/main.cpp
+++ b/config.tests/quick3d_assimp/main.cpp
@@ -33,6 +33,7 @@
 #include <assimp/DefaultLogger.hpp>
 #include <assimp/anim.h>
 #include <assimp/material.h>
+#include <assimp/GltfMaterial.h>
 #include <assimp/camera.h>
 
 int main(int , char **)
diff --git a/src/3rdparty/assimp/assimp.pri b/src/3rdparty/assimp/assimp.pri
deleted file mode 100644
index 3fd908a418f21f5349030e3048ae9e466678c354..0000000000000000000000000000000000000000
--- a/src/3rdparty/assimp/assimp.pri
+++ /dev/null
@@ -1,432 +0,0 @@
-CONFIG(debug, debug|release) : DEFINES+=_DEBUG
-CONFIG += exceptions rtti
-
-CONFIG -= precompile_header
-
-win32:DEFINES+=_CRT_SECURE_NO_WARNINGS
-
-qtConfig(system-zlib):!if(cross_compile:host_build): \
-    QMAKE_USE_PRIVATE += zlib
-else: \
-    QT_PRIVATE += zlib-private
-
-DEFINES += \
-    ASSIMP_BUILD_BOOST_WORKAROUND \
-    ASSIMP_BUILD_NO_3DS_IMPORTER \
-    ASSIMP_BUILD_NO_3D_IMPORTER \
-    ASSIMP_BUILD_NO_3MF_IMPORTER \
-    ASSIMP_BUILD_NO_AC_IMPORTER \
-    ASSIMP_BUILD_NO_AMF_IMPORTER \
-    ASSIMP_BUILD_NO_ASE_IMPORTER \
-    ASSIMP_BUILD_NO_ASSBIN_IMPORTER \
-    ASSIMP_BUILD_NO_B3D_IMPORTER \
-    ASSIMP_BUILD_NO_BLEND_IMPORTER \
-    ASSIMP_BUILD_NO_BVH_IMPORTER \
-    ASSIMP_BUILD_NO_C4D_IMPORTER \
-    ASSIMP_BUILD_NO_COB_IMPORTER \
-    ASSIMP_BUILD_NO_COMPRESSED_IFC \
-    ASSIMP_BUILD_NO_CSM_IMPORTER \
-    ASSIMP_BUILD_NO_DXF_IMPORTER \
-    ASSIMP_BUILD_NO_EXPORT \
-    ASSIMP_BUILD_NO_HMP_IMPORTER \
-    ASSIMP_BUILD_NO_IFC_IMPORTER \
-    ASSIMP_BUILD_NO_IRRMESH_IMPORTER \
-    ASSIMP_BUILD_NO_IRR_IMPORTER \
-    ASSIMP_BUILD_NO_LIMITBONEWEIGHTS_PROCESS \
-    ASSIMP_BUILD_NO_LWO_IMPORTER \
-    ASSIMP_BUILD_NO_LWS_IMPORTER \
-    ASSIMP_BUILD_NO_M3D_IMPORTER \
-    ASSIMP_BUILD_NO_MD2_IMPORTER \
-    ASSIMP_BUILD_NO_MD3_IMPORTER \
-    ASSIMP_BUILD_NO_MD5_IMPORTER \
-    ASSIMP_BUILD_NO_MDC_IMPORTER \
-    ASSIMP_BUILD_NO_MDL_IMPORTER \
-    ASSIMP_BUILD_NO_MMD_IMPORTER \
-    ASSIMP_BUILD_NO_MS3D_IMPORTER \
-    ASSIMP_BUILD_NO_NDO_IMPORTER \
-    ASSIMP_BUILD_NO_NFF_IMPORTER \
-    ASSIMP_BUILD_NO_OFF_IMPORTER \
-    ASSIMP_BUILD_NO_OGRE_IMPORTER \
-    ASSIMP_BUILD_NO_OPENGEX_IMPORTER \
-    ASSIMP_BUILD_NO_OWN_ZLIB \
-    ASSIMP_BUILD_NO_PLY_IMPORTER \
-    ASSIMP_BUILD_NO_Q3BSP_IMPORTER \
-    ASSIMP_BUILD_NO_Q3D_IMPORTER \
-    ASSIMP_BUILD_NO_RAW_IMPORTER \
-    ASSIMP_BUILD_NO_SIB_IMPORTER \
-    ASSIMP_BUILD_NO_SMD_IMPORTER \
-    ASSIMP_BUILD_NO_STEP_IMPORTER \
-    ASSIMP_BUILD_NO_TERRAGEN_IMPORTER \
-    ASSIMP_BUILD_NO_X3D_IMPORTER \
-    ASSIMP_BUILD_NO_XGL_IMPORTER \
-    ASSIMP_BUILD_NO_X_IMPORTER \
-    NOUNCRYPT \
-    RAPIDJSON_HAS_STDSTRING=1 \
-    RAPIDJSON_NOMEMBERITERATORCLASS
-
-win32: DEFINES += WindowsStore
-
-intel_icc: {
-    # warning #310: old-style parameter list (anachronism)
-    QMAKE_CFLAGS_WARN_ON += -wd310
-
-    # warning #68: integer conversion resulted in a change of sign
-    QMAKE_CFLAGS_WARN_ON += -wd68
-
-    # warning #858: type qualifier on return type is meaningless
-    QMAKE_CFLAGS_WARN_ON += -wd858
-
-    QMAKE_CXXFLAGS_WARN_ON += $$QMAKE_CFLAGS_WARN_ON
-} else:gcc|clang: {
-    # Stop compiler complaining about ignored qualifiers on return types
-    QMAKE_CFLAGS_WARN_ON += -Wno-ignored-qualifiers -Wno-unused-parameter -Wno-unused-variable -Wno-deprecated-declarations -Wno-unused-function
-    QMAKE_CXXFLAGS_WARN_ON = $$QMAKE_CFLAGS_WARN_ON
-} else:msvc {
-    # Disabled Warnings:
-    #   4100: 'identifier' : unreferenced formal parameter
-    #   4189: 'identifier' : local variable is initialized but not referenced
-    #   4267: coversion from 'size_t' to 'int', possible loss of data
-    #   4996: Function call with parameters that may be unsafe
-    #   4828: The file contains a character starting at offset 0x167b that
-    #         is illegal in the current source character set (codepage 65001)
-    QMAKE_CFLAGS_WARN_ON += -wd"4100" -wd"4189" -wd"4267" -wd"4996" -wd"4828"
-    QMAKE_CXXFLAGS_WARN_ON = $$QMAKE_CFLAGS_WARN_ON
-}
-
-clang: {
-    QMAKE_CFLAGS_WARN_ON += -Wno-unused-private-field
-    QMAKE_CXXFLAGS_WARN_ON = $$QMAKE_CFLAGS_WARN_ON
-}
-
-# Prevents "catastrophic error: Too many segments for object format" for builds using Windows ICC
-msvc: QMAKE_CXXFLAGS += /bigobj
-
-CONFIG += warn_on
-
-VPATH += \
-    $$PWD/src \
-    $$PWD/src/code \
-    $$PWD/src/code/res
-
-INCLUDEPATH += \
-        $$PWD \
-        $$PWD/.. \
-        $$PWD/src \
-        $$PWD/src/code \
-        $$PWD/src/code/Common \
-        $$PWD/src/code/AssetLib/Collada \
-        $$PWD/src/code/Material \
-        $$PWD/src/code/AssetLib/Obj \
-        $$PWD/src/code/AssetLib/FBX \
-        $$PWD/src/code/PostProcessing \
-        $$PWD/src/code/AssetLib/STL \
-        $$PWD/src/code/AssetLib/glTF \
-        $$PWD/src/code/AssetLib/glTF2 \
-        $$PWD/src/code/CApi \
-        $$PWD/src/include \
-        $$PWD/src/include/assimp/Compiler
-
-HEADERS += \
-    $$PWD/config.h \
-    $$PWD/revision.h
-
-HEADERS += \
-    $$PWD/src/include/assimp/Compiler/pushpack1.h \
-    $$PWD/src/include/assimp/Compiler/poppack1.h \
-    $$PWD/src/include/assimp/Compiler/pstdint.h \
-    $$PWD/src/include/assimp/anim.h \
-    $$PWD/src/include/assimp/ai_assert.h \
-    $$PWD/src/include/assimp/camera.h \
-    $$PWD/src/include/assimp/color4.h \
-    $$PWD/src/include/assimp/color4.inl \
-    $$PWD/src/include/assimp/defs.h \
-    $$PWD/src/include/assimp/Defines.h \
-    $$PWD/src/include/assimp/cfileio.h \
-    $$PWD/src/include/assimp/light.h \
-    $$PWD/src/include/assimp/material.h \
-    $$PWD/src/include/assimp/material.inl \
-    $$PWD/src/include/assimp/matrix3x3.h \
-    $$PWD/src/include/assimp/matrix3x3.inl \
-    $$PWD/src/include/assimp/matrix4x4.h \
-    $$PWD/src/include/assimp/matrix4x4.inl \
-    $$PWD/src/include/assimp/mesh.h \
-    $$PWD/src/include/assimp/pbrmaterial.h \
-    $$PWD/src/include/assimp/postprocess.h \
-    $$PWD/src/include/assimp/quaternion.h \
-    $$PWD/src/include/assimp/quaternion.inl \
-    $$PWD/src/include/assimp/scene.h \
-    $$PWD/src/include/assimp/metadata.h \
-    $$PWD/src/include/assimp/texture.h \
-    $$PWD/src/include/assimp/types.h \
-    $$PWD/src/include/assimp/vector2.h \
-    $$PWD/src/include/assimp/vector2.inl \
-    $$PWD/src/include/assimp/vector3.h \
-    $$PWD/src/include/assimp/vector3.inl \
-    $$PWD/src/include/assimp/version.h \
-    $$PWD/src/include/assimp/cimport.h \
-    $$PWD/src/include/assimp/importerdesc.h \
-    $$PWD/src/include/assimp/Importer.hpp \
-    $$PWD/src/include/assimp/DefaultLogger.hpp \
-    $$PWD/src/include/assimp/ProgressHandler.hpp \
-    $$PWD/src/include/assimp/IOStream.hpp \
-    $$PWD/src/include/assimp/IOSystem.hpp \
-    $$PWD/src/include/assimp/Logger.hpp \
-    $$PWD/src/include/assimp/LogStream.hpp \
-    $$PWD/src/include/assimp/NullLogger.hpp \
-    $$PWD/src/include/assimp/cexport.h \
-    $$PWD/src/include/assimp/Exporter.hpp \
-    $$PWD/src/include/assimp/DefaultIOStream.h \
-    $$PWD/src/include/assimp/DefaultIOSystem.h \
-    $$PWD/src/include/assimp/SceneCombiner.h \
-    $$PWD/src/include/assimp/fast_atof.h \
-    $$PWD/src/include/assimp/qnan.h \
-    $$PWD/src/include/assimp/BaseImporter.h \
-    $$PWD/src/include/assimp/Hash.h \
-    $$PWD/src/include/assimp/MemoryIOWrapper.h \
-    $$PWD/src/include/assimp/ParsingUtils.h \
-    $$PWD/src/include/assimp/StreamReader.h \
-    $$PWD/src/include/assimp/StreamWriter.h \
-    $$PWD/src/include/assimp/StringComparison.h \
-    $$PWD/src/include/assimp/StringUtils.h \
-    $$PWD/src/include/assimp/SGSpatialSort.h \
-    $$PWD/src/include/assimp/GenericProperty.h \
-    $$PWD/src/include/assimp/SpatialSort.h \
-    $$PWD/src/include/assimp/SkeletonMeshBuilder.h \
-    $$PWD/src/include/assimp/SmoothingGroups.h \
-    $$PWD/src/include/assimp/SmoothingGroups.inl \
-    $$PWD/src/include/assimp/StandardShapes.h \
-    $$PWD/src/include/assimp/RemoveComments.h \
-    $$PWD/src/include/assimp/Subdivision.h \
-    $$PWD/src/include/assimp/Vertex.h \
-    $$PWD/src/include/assimp/LineSplitter.h \
-    $$PWD/src/include/assimp/TinyFormatter.h \
-    $$PWD/src/include/assimp/Profiler.h \
-    $$PWD/src/include/assimp/LogAux.h \
-    $$PWD/src/include/assimp/Bitmap.h \
-    $$PWD/src/include/assimp/XMLTools.h \
-    $$PWD/src/include/assimp/IOStreamBuffer.h \
-    $$PWD/src/include/assimp/CreateAnimMesh.h \
-    $$PWD/src/include/assimp/BlobIOSystem.h \
-    $$PWD/src/include/assimp/MathFunctions.h \
-    $$PWD/src/include/assimp/Exceptional.h \
-    $$PWD/src/include/assimp/ByteSwapper.h \
-    $$PWD/src/include/assimp/DefaultLogger.hpp \
-    $$PWD/src/include/assimp/LogStream.hpp \
-    $$PWD/src/include/assimp/Logger.hpp \
-    $$PWD/src/include/assimp/NullLogger.hpp \
-    $$PWD/src/include/assimp/ZipArchiveIOSystem.h \
-    $$PWD/src/code/Common/AssertHandler.h \
-    $$PWD/src/code/Common/FileLogStream.h \
-    $$PWD/src/code/Common/StdOStreamLogStream.h \
-    $$PWD/src/code/Common/BaseProcess.h \
-    $$PWD/src/code/Common/Importer.h \
-    $$PWD/src/code/Common/ScenePrivate.h \
-    $$PWD/src/code/Common/DefaultProgressHandler.h \
-    $$PWD/src/code/CApi/CInterfaceIOWrapper.h \
-    $$PWD/src/code/Common/IFF.h \
-    $$PWD/src/code/Common/VertexTriangleAdjacency.h \
-    $$PWD/src/code/Common/ScenePreprocessor.h \
-    $$PWD/src/code/Common/TargetAnimation.h \
-    $$PWD/src/code/Common/simd.h \
-    $$PWD/src/code/AssetLib/Collada/ColladaHelper.h \
-    $$PWD/src/code/AssetLib/Collada/ColladaLoader.h \
-    $$PWD/src/code/AssetLib/Collada/ColladaParser.h \
-    $$PWD/src/code/Material/MaterialSystem.h \
-    $$PWD/src/code/AssetLib/Obj/ObjFileData.h \
-    $$PWD/src/code/AssetLib/Obj/ObjFileImporter.h \
-    $$PWD/src/code/AssetLib/Obj/ObjFileMtlImporter.h \
-    $$PWD/src/code/AssetLib/Obj/ObjFileParser.h \
-    $$PWD/src/code/AssetLib/Obj/ObjTools.h \
-    $$PWD/src/code/AssetLib/FBX/FBXCompileConfig.h \
-    $$PWD/src/code/AssetLib/FBX/FBXImporter.h \
-    $$PWD/src/code/AssetLib/FBX/FBXParser.h \
-    $$PWD/src/code/AssetLib/FBX/FBXTokenizer.h \
-    $$PWD/src/code/AssetLib/FBX/FBXImportSettings.h \
-    $$PWD/src/code/AssetLib/FBX/FBXConverter.h \
-    $$PWD/src/code/AssetLib/FBX/FBXUtil.h \
-    $$PWD/src/code/AssetLib/FBX/FBXDocument.h \
-    $$PWD/src/code/AssetLib/FBX/FBXProperties.h \
-    $$PWD/src/code/AssetLib/FBX/FBXMeshGeometry.h \
-    $$PWD/src/code/AssetLib/FBX/FBXCommon.h \
-    $$PWD/src/code/PostProcessing/ArmaturePopulate.h \
-    $$PWD/src/code/PostProcessing/CalcTangentsProcess.h \
-    $$PWD/src/code/PostProcessing/ComputeUVMappingProcess.h \
-    $$PWD/src/code/PostProcessing/ConvertToLHProcess.h \
-    $$PWD/src/code/PostProcessing/EmbedTexturesProcess.h \
-    $$PWD/src/code/PostProcessing/FindDegenerates.h \
-    $$PWD/src/code/PostProcessing/FindInstancesProcess.h \
-    $$PWD/src/code/PostProcessing/FindInvalidDataProcess.h \
-    $$PWD/src/code/PostProcessing/FixNormalsStep.h \
-    $$PWD/src/code/PostProcessing/DropFaceNormalsProcess.h \
-    $$PWD/src/code/PostProcessing/GenBoundingBoxesProcess.h \
-    $$PWD/src/code/PostProcessing/GenFaceNormalsProcess.h \
-    $$PWD/src/code/PostProcessing/GenVertexNormalsProcess.h \
-    $$PWD/src/code/PostProcessing/PretransformVertices.h \
-    $$PWD/src/code/PostProcessing/ImproveCacheLocality.h \
-    $$PWD/src/code/PostProcessing/JoinVerticesProcess.h \
-    $$PWD/src/code/PostProcessing/RemoveRedundantMaterials.h \
-    $$PWD/src/code/PostProcessing/RemoveVCProcess.h \
-    $$PWD/src/code/PostProcessing/SortByPTypeProcess.h \
-    $$PWD/src/code/PostProcessing/SplitLargeMeshes.h \
-    $$PWD/src/code/PostProcessing/SplitByBoneCountProcess.h \
-    $$PWD/src/code/PostProcessing/TextureTransform.h \
-    $$PWD/src/code/PostProcessing/TriangulateProcess.h \
-    $$PWD/src/code/PostProcessing/ValidateDataStructure.h \
-    $$PWD/src/code/PostProcessing/OptimizeGraph.h \
-    $$PWD/src/code/PostProcessing/OptimizeMeshes.h \
-    $$PWD/src/code/PostProcessing/DeboneProcess.h \
-    $$PWD/src/code/PostProcessing/ProcessHelper.h \
-    $$PWD/src/code/Common/PolyTools.h \
-    $$PWD/src/code/PostProcessing/MakeVerboseFormat.h \
-    $$PWD/src/code/PostProcessing/ScaleProcess.h \
-    $$PWD/src/code/AssetLib/glTF/glTFAsset.h \
-    $$PWD/src/code/AssetLib/glTF/glTFAsset.inl \
-    $$PWD/src/code/AssetLib/glTF/glTFAssetWriter.inl \
-    $$PWD/src/code/AssetLib/glTF/glTFAssetWriter.h \
-    $$PWD/src/code/AssetLib/glTF/glTFImporter.h \
-    $$PWD/src/code/AssetLib/glTF/glTFCommon.h \
-    $$PWD/src/code/AssetLib/glTF2/glTF2AssetWriter.h \
-    $$PWD/src/code/AssetLib/glTF2/glTF2Asset.h \
-    $$PWD/src/code/AssetLib/glTF2/glTF2Asset.inl \
-    $$PWD/src/code/AssetLib/glTF2/glTF2AssetWriter.inl \
-    $$PWD/src/code/AssetLib/glTF2/glTF2Importer.h \
-    $$PWD/src/code/AssetLib/STL/STLLoader.h
-
-SOURCES += \
-    $$PWD/src/code/Common/Assimp.cpp \
-    $$PWD/src/code/Common/AssertHandler.cpp \
-    $$PWD/src/code/Common/DefaultLogger.cpp \
-    $$PWD/src/code/Common/BaseImporter.cpp \
-    $$PWD/src/code/Common/BaseProcess.cpp \
-    $$PWD/src/code/Common/PostStepRegistry.cpp \
-    $$PWD/src/code/Common/ImporterRegistry.cpp \
-    $$PWD/src/code/Common/DefaultIOStream.cpp \
-    $$PWD/src/code/Common/DefaultIOSystem.cpp \
-    $$PWD/src/code/Common/Exceptional.cpp \
-    $$PWD/src/code/CApi/CInterfaceIOWrapper.cpp \
-    $$PWD/src/code/Common/Importer.cpp \
-    $$PWD/src/code/Common/SGSpatialSort.cpp \
-    $$PWD/src/code/Common/VertexTriangleAdjacency.cpp \
-    $$PWD/src/code/Common/SpatialSort.cpp \
-    $$PWD/src/code/Common/SceneCombiner.cpp \
-    $$PWD/src/code/Common/ScenePreprocessor.cpp \
-    $$PWD/src/code/Common/SkeletonMeshBuilder.cpp \
-    $$PWD/src/code/Common/StandardShapes.cpp \
-    $$PWD/src/code/Common/TargetAnimation.cpp \
-    $$PWD/src/code/Common/RemoveComments.cpp \
-    $$PWD/src/code/Common/Subdivision.cpp \
-    $$PWD/src/code/Common/scene.cpp \
-    $$PWD/src/code/Common/Bitmap.cpp \
-    $$PWD/src/code/Common/Version.cpp \
-    $$PWD/src/code/Common/CreateAnimMesh.cpp \
-    $$PWD/src/code/Common/simd.cpp \
-    $$PWD/src/code/Common/material.cpp \
-    $$PWD/src/code/Common/ZipArchiveIOSystem.cpp \
-    $$PWD/src/code/AssetLib/Collada/ColladaHelper.cpp \
-    $$PWD/src/code/AssetLib/Collada/ColladaLoader.cpp \
-    $$PWD/src/code/AssetLib/Collada/ColladaParser.cpp \
-    $$PWD/src/code/Material/MaterialSystem.cpp \
-    $$PWD/src/code/AssetLib/Obj/ObjFileImporter.cpp \
-    $$PWD/src/code/AssetLib/Obj/ObjFileMtlImporter.cpp \
-    $$PWD/src/code/AssetLib/Obj/ObjFileParser.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXImporter.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXParser.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXTokenizer.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXConverter.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXUtil.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXDocument.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXProperties.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXMeshGeometry.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXMaterial.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXModel.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXAnimation.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXNodeAttribute.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXDeformer.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXBinaryTokenizer.cpp \
-    $$PWD/src/code/AssetLib/FBX/FBXDocumentUtil.cpp \
-    $$PWD/src/code/PostProcessing/ArmaturePopulate.cpp \
-    $$PWD/src/code/PostProcessing/CalcTangentsProcess.cpp \
-    $$PWD/src/code/PostProcessing/ComputeUVMappingProcess.cpp \
-    $$PWD/src/code/PostProcessing/ConvertToLHProcess.cpp \
-    $$PWD/src/code/PostProcessing/EmbedTexturesProcess.cpp \
-    $$PWD/src/code/PostProcessing/FindDegenerates.cpp \
-    $$PWD/src/code/PostProcessing/FindInstancesProcess.cpp \
-    $$PWD/src/code/PostProcessing/FindInvalidDataProcess.cpp \
-    $$PWD/src/code/PostProcessing/FixNormalsStep.cpp \
-    $$PWD/src/code/PostProcessing/DropFaceNormalsProcess.cpp \
-    $$PWD/src/code/PostProcessing/GenBoundingBoxesProcess.cpp \
-    $$PWD/src/code/PostProcessing/GenFaceNormalsProcess.cpp \
-    $$PWD/src/code/PostProcessing/GenVertexNormalsProcess.cpp \
-    $$PWD/src/code/PostProcessing/PretransformVertices.cpp \
-    $$PWD/src/code/PostProcessing/ImproveCacheLocality.cpp \
-    $$PWD/src/code/PostProcessing/JoinVerticesProcess.cpp \
-    $$PWD/src/code/PostProcessing/RemoveRedundantMaterials.cpp \
-    $$PWD/src/code/PostProcessing/RemoveVCProcess.cpp \
-    $$PWD/src/code/PostProcessing/SortByPTypeProcess.cpp \
-    $$PWD/src/code/PostProcessing/SplitLargeMeshes.cpp \
-    $$PWD/src/code/PostProcessing/SplitByBoneCountProcess.cpp \
-    $$PWD/src/code/PostProcessing/TextureTransform.cpp \
-    $$PWD/src/code/PostProcessing/TriangulateProcess.cpp \
-    $$PWD/src/code/PostProcessing/ValidateDataStructure.cpp \
-    $$PWD/src/code/PostProcessing/OptimizeGraph.cpp \
-    $$PWD/src/code/PostProcessing/OptimizeMeshes.cpp \
-    $$PWD/src/code/PostProcessing/DeboneProcess.cpp \
-    $$PWD/src/code/PostProcessing/ProcessHelper.cpp \
-    $$PWD/src/code/PostProcessing/MakeVerboseFormat.cpp \
-    $$PWD/src/code/PostProcessing/ScaleProcess.cpp \
-    $$PWD/src/code/AssetLib/glTF/glTFImporter.cpp \
-    $$PWD/src/code/AssetLib/glTF/glTFCommon.cpp \
-    $$PWD/src/code/AssetLib/glTF2/glTF2Importer.cpp \
-    $$PWD/src/code/AssetLib/STL/STLLoader.cpp
-
-# pugixml (needed for DAE/Collada support)
-HEADERS += \
-    $$PWD/src/contrib/pugixml/src/pugixml.hpp \
-    $$PWD/src/contrib/pugixml/contrib/foreach.hpp
-
-SOURCES += $$PWD/src/contrib/pugixml/src/pugixml.cpp
-
-VPATH += $$PWD/src/contrib/pugixml/src
-INCLUDEPATH += $$PWD/src/contrib/pugixml/src \
-        $PWD/src/contrib/pugixml/contrib
-
-msvc: DEFINES += _SCL_SECURE_NO_WARNINGS _CRT_SECURE_NO_WARNINGS
-
-# rapidjson (needed for GLTF/GLTF2)
-VPATH += $$PWD/src/contrib/rapidjson/include
-INCLUDEPATH += $$PWD/src/contrib/rapidjson/include
-
-# utf8cpp
-VPATH += $$PWD/src/contrib/utf8cpp/source
-INCLUDEPATH += $$PWD/src/contrib/utf8cpp/source
-
-# poly2tri (blender tessellator)
-VPATH += $$PWD/src/contrib/poly2tri
-INCLUDEPATH += $$PWD/src/contrib/poly2tri
-
-HEADERS += \
-    $$PWD/src/contrib/poly2tri/poly2tri/common/shapes.h \
-    $$PWD/src/contrib/poly2tri/poly2tri/common/utils.h \
-    $$PWD/src/contrib/poly2tri/poly2tri/sweep/advancing_front.h \
-    $$PWD/src/contrib/poly2tri/poly2tri/sweep/cdt.h \
-    $$PWD/src/contrib/poly2tri/poly2tri/sweep/sweep.h \
-    $$PWD/src/contrib/poly2tri/poly2tri/sweep/sweep_context.h
-
-SOURCES += \
-    $$PWD/src/contrib/poly2tri/poly2tri/common/shapes.cc \
-    $$PWD/src/contrib/poly2tri/poly2tri/sweep/advancing_front.cc \
-    $$PWD/src/contrib/poly2tri/poly2tri/sweep/cdt.cc \
-    $$PWD/src/contrib/poly2tri/poly2tri/sweep/sweep.cc \
-    $$PWD/src/contrib/poly2tri/poly2tri/sweep/sweep_context.cc
-
-# unzip (collada loader)
-VPATH += $$PWD/unzip $$PWD/contrib/unzip
-INCLUDEPATH += $$PWD/unzip $$PWD/contrib/unzip
-
-HEADERS += \
-    $$PWD/src/contrib/unzip/crypt.h \
-    $$PWD/src/contrib/unzip/ioapi.h \
-    $$PWD/unzip/unzip.h
-SOURCES += \
-    $$PWD/src/contrib/unzip/ioapi.c \
-    $$PWD/src/contrib/unzip/unzip.c
diff --git a/src/3rdparty/assimp/config.h b/src/3rdparty/assimp/config.h
index b9a4281e796522cb263ee4db05a0452025ae337f..f66f2329377c6fdcfb631ad038cee965f2755b60 100644
--- a/src/3rdparty/assimp/config.h
+++ b/src/3rdparty/assimp/config.h
@@ -558,6 +558,15 @@ enum aiComponent
 // Various stuff to fine-tune the behaviour of specific importer plugins.
 // ###########################################################################
 
+// ---------------------------------------------------------------------------
+/** @brief Importers which parse JSON may use this to obtain a pointer to a
+ * rapidjson::IRemoteSchemaDocumentProvider.
+ *
+ * The default value is nullptr
+ * Property type: void*
+ */
+#define AI_CONFIG_IMPORT_SCHEMA_DOCUMENT_PROVIDER \
+    "IMPORT_SCHEMA_DOCUMENT_PROVIDER"
 
 // ---------------------------------------------------------------------------
 /** @brief Set whether the fbx importer will merge all geometry layers present
@@ -865,6 +874,15 @@ enum aiComponent
 #define AI_CONFIG_IMPORT_MD3_SKIN_NAME \
     "IMPORT_MD3_SKIN_NAME"
 
+// ---------------------------------------------------------------------------
+/** @brief  Specify if to try load Quake 3 shader files. This also controls
+ *  original surface name handling: when disabled it will be used unchanged.
+ *
+ * Property type: bool. Default value: true.
+ */
+#define AI_CONFIG_IMPORT_MD3_LOAD_SHADERS \
+    "IMPORT_MD3_LOAD_SHADERS"
+
 // ---------------------------------------------------------------------------
 /** @brief  Specify the Quake 3 shader file to be used for a particular
  *  MD3 file. This can also be a search path.
@@ -1077,6 +1095,23 @@ enum aiComponent
  */
 #define AI_CONFIG_EXPORT_POINT_CLOUDS "EXPORT_POINT_CLOUDS"
 
+/**
+ * @brief Specifies the blob name, assimp uses for exporting.
+ * 
+ * Some formats require auxiliary files to be written, that need to be linked back into 
+ * the original file. For example, OBJ files export materials to a separate MTL file and
+ * use the `mtllib` keyword to reference this file.
+ * 
+ * When exporting blobs using #ExportToBlob, assimp does not know the name of the blob
+ * file and thus outputs `mtllib $blobfile.mtl`, which might not be desired, since the 
+ * MTL file might be called differently. 
+ * 
+ * This property can be used to give the exporter a hint on how to use the magic 
+ * `$blobfile` keyword. If the exporter detects the keyword and is provided with a name
+ * for the blob, it instead uses this name.
+ */
+#define AI_CONFIG_EXPORT_BLOB_NAME "EXPORT_BLOB_NAME"
+
 /**
  *  @brief  Specifies a gobal key factor for scale, float value
  */
@@ -1100,6 +1135,6 @@ enum aiComponent
  * Property type: Bool. Default value: undefined.
  */
 
-/* #undef ASSIMP_DOUBLE_PRECISION */
+
 
 #endif // !! AI_CONFIG_H_INC
diff --git a/src/3rdparty/assimp/qt_attribution.json b/src/3rdparty/assimp/qt_attribution.json
index b5dfc1667685d136d448cb54ada81480736910bb..308e0f61903079b39e1e3fdd8669b151af9da1fa 100644
--- a/src/3rdparty/assimp/qt_attribution.json
+++ b/src/3rdparty/assimp/qt_attribution.json
@@ -6,9 +6,9 @@
     "QtUsage": "Used for importing assets for use with Qt Quick 3D",
 
     "Homepage": "http://www.assimp.org/",
-    "Version": "5.0.1",
+    "Version": "5.1.1",
     "License": "BSD 3-clause \"New\" or \"Revised\" Licensee",
     "LicenseId": "BSD-3-Clause",
     "LicenseFile": "LICENSE",
-    "Copyright": "Copyright (c) 2006-2018, assimp team"
+    "Copyright": "Copyright (c) 2006-2021, assimp team"
 }
diff --git a/src/3rdparty/assimp/revision.h b/src/3rdparty/assimp/revision.h
index 3b9653281ab573223516cfcf22fae4d2442d5d15..047b6395ca4e1b3cdc57747f2923527fb7715a5a 100644
--- a/src/3rdparty/assimp/revision.h
+++ b/src/3rdparty/assimp/revision.h
@@ -1,11 +1,11 @@
 #ifndef ASSIMP_REVISION_H_INC
 #define ASSIMP_REVISION_H_INC
 
-#define GitVersion 0x5a38cd0a
+#define GitVersion 0xaeba7a43
 #define GitBranch "HEAD"
 
 #define VER_MAJOR 5
-#define VER_MINOR 0
+#define VER_MINOR 1
 #define VER_PATCH 1
 #define VER_BUILD 0
 
diff --git a/src/plugins/assetimporters/assimp/CMakeLists.txt b/src/plugins/assetimporters/assimp/CMakeLists.txt
index 5e86643853f9eec1911d92824ea8231a75bfdbdf..f6e8884a523df854abf9aaaf8f23b408f5ba22d6 100644
--- a/src/plugins/assetimporters/assimp/CMakeLists.txt
+++ b/src/plugins/assetimporters/assimp/CMakeLists.txt
@@ -204,7 +204,6 @@ qt_internal_extend_target(AssimpImporterPlugin CONDITION NOT QT_FEATURE_system_a
         ../../../3rdparty/assimp/src/include/assimp/DefaultIOStream.h
         ../../../3rdparty/assimp/src/include/assimp/DefaultIOSystem.h
         ../../../3rdparty/assimp/src/include/assimp/DefaultLogger.hpp
-        ../../../3rdparty/assimp/src/include/assimp/Defines.h
         ../../../3rdparty/assimp/src/include/assimp/Exceptional.h
         ../../../3rdparty/assimp/src/include/assimp/Exporter.hpp
         ../../../3rdparty/assimp/src/include/assimp/GenericProperty.h
diff --git a/src/plugins/assetimporters/assimp/assimpimporter.cpp b/src/plugins/assetimporters/assimp/assimpimporter.cpp
index d34465534fc678720c649b92771fadfc7d8f9411..4e57ac1c8fbeffdf7f9c906bb7123473599753e7 100644
--- a/src/plugins/assetimporters/assimp/assimpimporter.cpp
+++ b/src/plugins/assetimporters/assimp/assimpimporter.cpp
@@ -34,7 +34,8 @@
 #include <assimp/Logger.hpp>
 #include <assimp/DefaultLogger.hpp>
 #include <assimp/postprocess.h>
-#include <assimp/pbrmaterial.h>
+#include <assimp/material.h>
+#include <assimp/GltfMaterial.h>
 #include <assimp/importerdesc.h>
 
 #include <QtQuick3DUtils/private/qssgmesh_p.h>
@@ -1268,7 +1269,7 @@ void AssimpImporter::generateMaterial(aiMaterial *material, QTextStream &output,
         // GLTF Mode
         {
             aiColor4D baseColorFactor;
-            result = material->Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR, baseColorFactor);
+            result = material->Get(AI_MATKEY_BASE_COLOR, baseColorFactor);
             if (result == aiReturn_SUCCESS)
                 QSSGQmlUtilities::writeQmlPropertyHelper(output,
                                                          tabLevel + 1,
@@ -1276,7 +1277,7 @@ void AssimpImporter::generateMaterial(aiMaterial *material, QTextStream &output,
                                                          QStringLiteral("baseColor"),
                                                          aiColorToQColor(baseColorFactor));
 
-            QString baseColorImage = generateImage(material, AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_TEXTURE, tabLevel + 1);
+            QString baseColorImage = generateImage(material, AI_MATKEY_BASE_COLOR_TEXTURE, tabLevel + 1);
             if (!baseColorImage.isNull()) {
                 output << QSSGQmlUtilities::insertTabs(tabLevel + 1) << QStringLiteral("baseColorMap: ") << baseColorImage << QStringLiteral("\n");
                 output << QSSGQmlUtilities::insertTabs(tabLevel + 1) << QStringLiteral("opacityChannel: Material.A\n");
@@ -1294,7 +1295,7 @@ void AssimpImporter::generateMaterial(aiMaterial *material, QTextStream &output,
             }
 
             ai_real metallicFactor;
-            result = material->Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR, metallicFactor);
+            result = material->Get(AI_MATKEY_METALLIC_FACTOR, metallicFactor);
             if (result == aiReturn_SUCCESS) {
                 QSSGQmlUtilities::writeQmlPropertyHelper(output,
                                                          tabLevel + 1,
@@ -1304,7 +1305,7 @@ void AssimpImporter::generateMaterial(aiMaterial *material, QTextStream &output,
             }
 
             ai_real roughnessFactor;
-            result = material->Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR, roughnessFactor);
+            result = material->Get(AI_MATKEY_ROUGHNESS_FACTOR, roughnessFactor);
             if (result == aiReturn_SUCCESS) {
                 QSSGQmlUtilities::writeQmlPropertyHelper(output,
                                                          tabLevel + 1,
@@ -1410,65 +1411,35 @@ void AssimpImporter::generateMaterial(aiMaterial *material, QTextStream &output,
         }
 
         {
-            bool isUnlit;
-            result = material->Get(AI_MATKEY_GLTF_UNLIT, isUnlit);
-            if (result == aiReturn_SUCCESS && isUnlit)
+            int shadingModel = 0;
+            result = material->Get(AI_MATKEY_SHADING_MODEL, shadingModel);
+            if (result == aiReturn_SUCCESS && shadingModel == aiShadingMode_Unlit)
                 output << QSSGQmlUtilities::insertTabs(tabLevel + 1) << QStringLiteral("lighting: PrincipledMaterial.NoLighting\n");
         }
 
         // SpecularGlossiness Properties
-        bool hasSpecularGlossiness;
-        result = material->Get(AI_MATKEY_GLTF_PBRSPECULARGLOSSINESS, hasSpecularGlossiness);
-        if (result == aiReturn_SUCCESS && hasSpecularGlossiness) {
-
-            // diffuseFactor (color) // not used (yet), but ends up being diffuseColor
-//            {
-//                aiColor4D diffuseColor;
-//                result = material->Get(AI_MATKEY_COLOR_DIFFUSE, diffuseColor);
-//                if (result == aiReturn_SUCCESS)
-//                    QSSGQmlUtilities::writeQmlPropertyHelper(output,
-//                                                             tabLevel + 1,
-//                                                             QSSGQmlUtilities::PropertyMap::PrincipledMaterial,
-//                                                             QStringLiteral("diffuseColor"),
-//                                                             aiColorToQColor(diffuseColor));
-//            }
-
-            // specularColor (color) (our property is a float?)
-//            {
-//                aiColor3D specularColor;
-//                result = material->Get(AI_MATKEY_COLOR_SPECULAR, specularColor);
-//                if (result == aiReturn_SUCCESS)
-//                    QSSGQmlUtilities::writeQmlPropertyHelper(output,
-//                                                             tabLevel + 1,
-//                                                             QSSGQmlUtilities::PropertyMap::PrincipledMaterial,
-//                                                             QStringLiteral("specularTint"),
-//                                                             aiColorToQColor(specularColor));
-//            }
-
-            // glossinessFactor (float)
+        // If AI_MATKEY_GLOSSINESS_FACTOR is set, then a Specular/Glossiness is available
+        // NOTE: this isn't in assimpimporter_rt
+        {
+            ai_real glossiness;
+            result = material->Get(AI_MATKEY_GLOSSINESS_FACTOR, glossiness);
+            if (result == aiReturn_SUCCESS)
             {
                 ai_real glossiness;
-                result = material->Get(AI_MATKEY_GLTF_PBRSPECULARGLOSSINESS_GLOSSINESS_FACTOR, glossiness);
+                result = material->Get(AI_MATKEY_GLOSSINESS_FACTOR, glossiness);
                 if (result == aiReturn_SUCCESS)
                     QSSGQmlUtilities::writeQmlPropertyHelper(output,
                                                              tabLevel + 1,
                                                              QSSGQmlUtilities::PropertyMap::PrincipledMaterial,
                                                              QStringLiteral("specularAmount"),
                                                              glossiness);
-            }
-
-            // diffuseTexture // not used (yet), but ends up being diffuseMap(1)
-//            {
-//                QString diffuseMapImage = generateImage(material, aiTextureType_DIFFUSE, 0, tabLevel + 1);
-//                if (!diffuseMapImage.isNull())
-//                    output << QSSGQmlUtilities::insertTabs(tabLevel + 1) << QStringLiteral("diffuseMap: ") << diffuseMapImage << QStringLiteral("\n");
-//            }
 
-            // specularGlossinessTexture
-            {
-                QString specularMapImage = generateImage(material, aiTextureType_SPECULAR, 0, tabLevel + 1);
-                if (!specularMapImage.isNull())
-                    output << QSSGQmlUtilities::insertTabs(tabLevel + 1) << QStringLiteral("specularMap: ") << specularMapImage << QStringLiteral("\n");
+                // specularGlossinessTexture
+                {
+                    QString specularMapImage = generateImage(material, aiTextureType_SPECULAR, 0, tabLevel + 1);
+                    if (!specularMapImage.isNull())
+                        output << QSSGQmlUtilities::insertTabs(tabLevel + 1) << QStringLiteral("specularMap: ") << specularMapImage << QStringLiteral("\n");
+                }
             }
         }
     }
@@ -1640,7 +1603,7 @@ QString AssimpImporter::generateImage(aiMaterial *material, aiTextureType textur
 
     if (m_gltfMode) {
         uint gltfUvIndex = 0;
-        result = material->Get(AI_MATKEY_GLTF_TEXTURE_TEXCOORD(textureType, index), gltfUvIndex);
+        result = material->Get(AI_MATKEY_UVWSRC(textureType, index), gltfUvIndex);
         if (result == aiReturn_SUCCESS)
             uvIndex = gltfUvIndex;
     }
diff --git a/src/plugins/assetimporters/assimp/assimpimporter_rt.cpp b/src/plugins/assetimporters/assimp/assimpimporter_rt.cpp
index 8b0a0f3de92cd9c9c30e9dbc10afa39fd208261d..34e5681607a4da8ea06bc5ac14fb6d0a1006cc68 100644
--- a/src/plugins/assetimporters/assimp/assimpimporter_rt.cpp
+++ b/src/plugins/assetimporters/assimp/assimpimporter_rt.cpp
@@ -45,7 +45,8 @@
 #include <assimp/Logger.hpp>
 #include <assimp/DefaultLogger.hpp>
 #include <assimp/postprocess.h>
-#include <assimp/pbrmaterial.h>
+#include <assimp/material.h>
+#include <assimp/GltfMaterial.h>
 #include <assimp/importerdesc.h>
 
 // ASSIMP INC
@@ -344,7 +345,7 @@ static void setMaterialProperties(QSSGSceneDesc::Material &target, const aiMater
                     texInfo.transform = &transform;
 
                 if (sceneInfo.ver == SceneInfo::GltfVersion::v2) {
-                    material.Get(AI_MATKEY_GLTF_TEXTURE_TEXCOORD(textureType, index), texInfo.uvIndex);
+                    material.Get(AI_MATKEY_UVWSRC(textureType, index), texInfo.uvIndex);
                     material.Get(AI_MATKEY_GLTF_MAPPINGFILTER_MIN(textureType, index), texInfo.minFilter);
                     material.Get(AI_MATKEY_GLTF_MAPPINGFILTER_MAG(textureType, index), texInfo.magFilter);
                 }
@@ -414,12 +415,12 @@ static void setMaterialProperties(QSSGSceneDesc::Material &target, const aiMater
         aiReturn result;
         {
             aiColor4D baseColorFactor;
-            result = source.Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR, baseColorFactor);
+            result = source.Get(AI_MATKEY_BASE_COLOR, baseColorFactor);
             if (result == aiReturn_SUCCESS)
                 QSSGSceneDesc::setProperty(target, "baseColor", &QQuick3DPrincipledMaterial::setBaseColor, aiColorToQColor(baseColorFactor));
         }
 
-        if (auto baseColorTexture = createTextureNode(source, AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_TEXTURE)) {
+        if (auto baseColorTexture = createTextureNode(source, AI_MATKEY_BASE_COLOR_TEXTURE)) {
             QSSGSceneDesc::setProperty(target, "baseColorMap", &QQuick3DPrincipledMaterial::setBaseColorMap, baseColorTexture);
             QSSGSceneDesc::setProperty(target, "opacityChannel", &QQuick3DPrincipledMaterial::setOpacityChannel, QQuick3DPrincipledMaterial::TextureChannelMapping::A);
         }
@@ -433,14 +434,14 @@ static void setMaterialProperties(QSSGSceneDesc::Material &target, const aiMater
 
         {
             ai_real metallicFactor;
-            result = source.Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR, metallicFactor);
+            result = source.Get(AI_MATKEY_METALLIC_FACTOR, metallicFactor);
             if (result == aiReturn_SUCCESS)
                 QSSGSceneDesc::setProperty(target, "metalness", &QQuick3DPrincipledMaterial::setMetalness, float(metallicFactor));
         }
 
         {
             ai_real roughnessFactor;
-            result = source.Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR, roughnessFactor);
+            result = source.Get(AI_MATKEY_ROUGHNESS_FACTOR, roughnessFactor);
             if (result == aiReturn_SUCCESS)
                 QSSGSceneDesc::setProperty(target, "roughness", &QQuick3DPrincipledMaterial::setRoughness, float(roughnessFactor));
         }
@@ -509,9 +510,9 @@ static void setMaterialProperties(QSSGSceneDesc::Material &target, const aiMater
         }
 
         {
-            bool isUnlit = false;
-            result = source.Get(AI_MATKEY_GLTF_UNLIT, isUnlit);
-            if (result == aiReturn_SUCCESS && isUnlit)
+            int shadingModel = 0;
+            result = source.Get(AI_MATKEY_SHADING_MODEL, shadingModel);
+            if (result == aiReturn_SUCCESS && shadingModel == aiShadingMode_Unlit)
                 QSSGSceneDesc::setProperty(target, "lighting", &QQuick3DPrincipledMaterial::setLighting, QQuick3DPrincipledMaterial::Lighting::NoLighting);
         }
 
diff --git a/src/plugins/assetimporters/assimp/assimputils.cpp b/src/plugins/assetimporters/assimp/assimputils.cpp
index f22431be9564cd5c55429223a099b46d343048fb..fe472d4ba069b211f9e957df3c621428c388711d 100644
--- a/src/plugins/assetimporters/assimp/assimputils.cpp
+++ b/src/plugins/assetimporters/assimp/assimputils.cpp
@@ -34,7 +34,6 @@
 #include <assimp/Logger.hpp>
 #include <assimp/DefaultLogger.hpp>
 #include <assimp/postprocess.h>
-#include <assimp/pbrmaterial.h>
 #include <assimp/importerdesc.h>
 
 #include <QtCore/qstring.h>
diff --git a/src/plugins/assetimporters/configure.cmake b/src/plugins/assetimporters/configure.cmake
index d976791a6d395ab2b8feb7482e9825ada9f48b83..6fc11a69dc7da122db4e734a995f03c769b9a2a4 100644
--- a/src/plugins/assetimporters/configure.cmake
+++ b/src/plugins/assetimporters/configure.cmake
@@ -10,13 +10,13 @@ set_property(CACHE INPUT_quick3d_assimp PROPERTY STRINGS undefined no qt system)
 
 #### Libraries
 
-qt_find_package(WrapQuick3DAssimp 5 PROVIDED_TARGETS WrapQuick3DAssimp::WrapQuick3DAssimp MODULE_NAME assetimporters QMAKE_LIB quick3d_assimp)
+qt_find_package(WrapQuick3DAssimp 5.1 PROVIDED_TARGETS WrapQuick3DAssimp::WrapQuick3DAssimp MODULE_NAME assetimporters QMAKE_LIB quick3d_assimp)
 
 qt_config_compile_test("quick3d_assimp"
                    LABEL "Assimp"
                    PROJECT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../../../config.tests/quick3d_assimp"
                    LIBRARIES WrapQuick3DAssimp::WrapQuick3DAssimp
-                   PACKAGES PACKAGE WrapQuick3DAssimp 5)
+                   PACKAGES PACKAGE WrapQuick3DAssimp 5.1)
 
 
 #### Tests
