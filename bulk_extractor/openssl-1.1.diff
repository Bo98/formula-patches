diff -pur a/src/dfxml/src/dfxml_configure.m4 b/src/dfxml/src/dfxml_configure.m4
--- a/src/dfxml/src/dfxml_configure.m4	2014-09-16 20:34:02.000000000 +0200
+++ b/src/dfxml/src/dfxml_configure.m4	2019-11-08 09:00:52.000000000 +0100
@@ -53,10 +53,16 @@ esac
 
 ################################################################
 ## OpenSSL Support is now required (for hash_t)
+## Note that this now works with both OpenSSL 1.0 and OpenSSL 1.1
+## On OpenSSL man page we can read:
+## EVP_MD_CTX_create() and EVP_MD_CTX_destroy() were renamed to EVP_MD_CTX_new() and EVP_MD_CTX_free() in OpenSSL 1.1.
+## So we need to check for all of them.
 AC_CHECK_HEADERS([openssl/aes.h openssl/bio.h openssl/evp.h openssl/hmac.h openssl/md5.h openssl/pem.h openssl/rand.h openssl/rsa.h openssl/sha.h openssl/pem.h openssl/x509.h])
+
 # OpenSSL has been installed under at least two different names...
 AC_CHECK_LIB([crypto],[EVP_get_digestbyname])	
 AC_CHECK_LIB([ssl],[SSL_library_init])
 AC_CHECK_FUNCS([EVP_get_digestbyname],,
 	AC_MSG_ERROR([SSL/OpenSSL support required]))
+AC_CHECK_FUNCS([EVP_MD_CTX_new EVP_MD_CTX_free])
 
diff -pur a/src/dfxml/src/hash_t.h b/src/dfxml/src/hash_t.h
--- a/src/dfxml/src/hash_t.h	2014-09-16 20:34:02.000000000 +0200
+++ b/src/dfxml/src/hash_t.h	2019-11-08 09:01:02.000000000 +0100
@@ -189,7 +189,7 @@ inline std::string digest_name<sha512_t>
 
 template<const EVP_MD *md(),size_t SIZE> 
 class hash_generator__ { 			/* generates the hash */
-    EVP_MD_CTX mdctx;	     /* the context for computing the value */
+    EVP_MD_CTX* mdctx;	     /* the context for computing the value */
     bool initialized;	       /* has the context been initialized? */
     bool finalized;
     /* Static function to determine if something is zero */
@@ -202,21 +202,30 @@ class hash_generator__ { 			/* generates
 public:
     int64_t hashed_bytes;
     /* This function takes advantage of the fact that different hash functions produce residues with different sizes */
-    hash_generator__():mdctx(),initialized(false),finalized(false),hashed_bytes(0){ }
+    hash_generator__():mdctx(NULL),initialized(false),finalized(false),hashed_bytes(0){ }
     ~hash_generator__(){
 	release();
     }
     void release(){			/* free allocated memory */
 	if(initialized){
-	    EVP_MD_CTX_cleanup(&mdctx);
+#ifdef HAVE_EVP_MD_CTX_FREE
+	    EVP_MD_CTX_free(mdctx);
+#else
+	    EVP_MD_CTX_destroy(mdctx);
+#endif
 	    initialized = false;
 	    hashed_bytes = 0;
 	}
     }
     void init(){
 	if(initialized==false){
-	    EVP_MD_CTX_init(&mdctx);
-	    EVP_DigestInit_ex(&mdctx, md(), NULL);
+#ifdef HAVE_EVP_MD_CTX_NEW
+	    mdctx = EVP_MD_CTX_new();
+#else
+	    mdctx = EVP_MD_CTX_create();
+#endif
+            if (!mdctx) throw std::bad_alloc();
+	    EVP_DigestInit_ex(mdctx, md(), NULL);
 	    initialized = true;
 	    finalized = false;
 	    hashed_bytes = 0;
@@ -228,21 +237,21 @@ public:
 	    std::cerr << "hashgen_t::update called after finalized\n";
 	    exit(1);
 	}
-	EVP_DigestUpdate(&mdctx,buf,bufsize);
+	EVP_DigestUpdate(mdctx,buf,bufsize);
 	hashed_bytes += bufsize;
     }
     hash__<md,SIZE> final() {
 	if(finalized){
 	  std::cerr << "currently friendly_geneator does not cache the final value\n";
 	  assert(0);
-	  /* code below will never be executed after assert(0) */
+          exit(1);                      // in case compiled with assertions disabled
 	}
 	if(!initialized){
 	  init();			/* do it now! */
 	}
 	hash__<md,SIZE> val;
 	unsigned int len = sizeof(val.digest);
-	EVP_DigestFinal(&mdctx,val.digest,&len);
+	EVP_DigestFinal(mdctx,val.digest,&len);
 	finalized = true;
 	return val;
     }
Only in b/src/dfxml/src: hash_t.h.orig
