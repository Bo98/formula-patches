diff -pur a/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h b/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h
--- a/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h	2016-12-01 09:17:04.000000000 +0100
+++ b/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h	2017-08-24 13:27:21.000000000 +0200
@@ -90,7 +90,7 @@ QBrush qt_mac_toQBrush(const NSColor *co
 // Creates a mutable shape, it's the caller's responsibility to release.
 HIMutableShapeRef qt_mac_QRegionToHIMutableShape(const QRegion &region);
 
-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage);
+void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage);
 
 NSDragOperation qt_mac_mapDropAction(Qt::DropAction action);
 NSDragOperation qt_mac_mapDropActions(Qt::DropActions actions);
diff -pur a/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm b/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm
--- a/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm	2016-12-01 09:17:04.000000000 +0100
+++ b/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm	2017-08-24 13:27:52.000000000 +0200
@@ -650,15 +650,8 @@ NSRect qt_mac_flipRect(const QRect &rect
     return NSMakeRect(rect.x(), flippedY, rect.width(), rect.height());
 }
 
-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)
+void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)
 {
-    // Verbatim copy if HIViewDrawCGImage (as shown on Carbon-Dev)
-    OSStatus err = noErr;
-
-    require_action(inContext != NULL, InvalidContext, err = paramErr);
-    require_action(inBounds != NULL, InvalidBounds, err = paramErr);
-    require_action(inImage != NULL, InvalidImage, err = paramErr);
-
     CGContextSaveGState( inContext );
     CGContextTranslateCTM (inContext, 0, inBounds->origin.y + CGRectGetMaxY(*inBounds));
     CGContextScaleCTM(inContext, 1, -1);
@@ -666,10 +659,6 @@ OSStatus qt_mac_drawCGImage(CGContextRef
     CGContextDrawImage(inContext, *inBounds, inImage);
 
     CGContextRestoreGState(inContext);
-InvalidImage:
-InvalidBounds:
-InvalidContext:
-        return err;
 }
 
 Qt::MouseButton cocoaButton2QtButton(NSInteger buttonNum)
diff -pur a/qtconnectivity/src/bluetooth/osx/osxbtcentralmanager.mm b/qtconnectivity/src/bluetooth/osx/osxbtcentralmanager.mm
--- a/qtconnectivity/src/bluetooth/osx/osxbtcentralmanager.mm	2015-10-13 06:35:37.000000000 +0200
+++ b/qtconnectivity/src/bluetooth/osx/osxbtcentralmanager.mm	2017-08-25 17:42:41.000000000 +0200
@@ -202,7 +202,7 @@ using namespace QT_NAMESPACE;
     }
 
 #if QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9, __IPHONE_6_0)
-    if (QSysInfo::MacintoshVersion >= qt_OS_limit(QSysInfo::MV_10_9, QSysInfo::MV_IOS_6_0)) {
+    {
         const quint128 qtUuidData(deviceUuid.toUInt128());
         // STATIC_ASSERT on sizes would be handy!
         uuid_t uuidData = {};
@@ -228,7 +228,7 @@ using namespace QT_NAMESPACE;
 
         return QLowEnergyController::NoError;
     }
-#endif
+#else
     OSXBluetooth::CFStrongReference<CFUUIDRef> cfUuid(OSXBluetooth::cf_uuid(deviceUuid));
     if (!cfUuid) {
         qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "failed to create CFUUID object";
@@ -239,6 +239,7 @@ using namespace QT_NAMESPACE;
     // Unfortunately, with old Core Bluetooth this call is asynchronous ...
     managerState = OSXBluetooth::CentralManagerConnecting;
     [manager retrievePeripherals:uuids];
+#endif
 
     return QLowEnergyController::NoError;
 }
@@ -269,10 +270,10 @@ using namespace QT_NAMESPACE;
 #if QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9, __IPHONE_7_0)
     using OSXBluetooth::qt_OS_limit;
 
-    if (QSysInfo::MacintoshVersion >= qt_OS_limit(QSysInfo::MV_10_9, QSysInfo::MV_IOS_7_0))
-        return peripheral.state == CBPeripheralStateConnected;
-#endif
+    return peripheral.state == CBPeripheralStateConnected;
+#else
     return peripheral.isConnected;
+#endif
 }
 
 - (void)disconnectFromDevice
@@ -1032,10 +1033,10 @@ using namespace QT_NAMESPACE;
 
     using namespace OSXBluetooth;
 
-    const CBCentralManagerState state = central.state;
+    const CBManagerState state = central.state;
 
-    if (state == CBCentralManagerStateUnknown
-        || state == CBCentralManagerStateResetting) {
+    if (state == CBManagerStateUnknown
+        || state == CBManagerStateResetting) {
         // We still have to wait, docs say:
         // "The current state of the central manager is unknown;
         // an update is imminent." or
@@ -1051,7 +1052,7 @@ using namespace QT_NAMESPACE;
     }
 
     // Let's check some states we do not like first:
-    if (state == CBCentralManagerStateUnsupported || state == CBCentralManagerStateUnauthorized) {
+    if (state == CBManagerStateUnsupported || state == CBManagerStateUnauthorized) {
         if (managerState == CentralManagerUpdating) {
             // We tried to connect just to realize, LE is not supported. Report this.
             managerState = CentralManagerIdle;
@@ -1065,7 +1066,7 @@ using namespace QT_NAMESPACE;
         return;
     }
 
-    if (state == CBCentralManagerStatePoweredOff) {
+    if (state == CBManagerStatePoweredOff) {
         if (managerState == CentralManagerUpdating) {
             // I've seen this instead of Unsopported on OS X.
             managerState = CentralManagerIdle;
@@ -1079,7 +1080,7 @@ using namespace QT_NAMESPACE;
         return;
     }
 
-    if (state == CBCentralManagerStatePoweredOn) {
+    if (state == CBManagerStatePoweredOn) {
         if (managerState == CentralManagerUpdating) {
             managerState = CentralManagerIdle;
             const QLowEnergyController::Error status = [self connectToDevice];
diff -pur a/qtconnectivity/src/bluetooth/osx/osxbtledeviceinquiry.mm b/qtconnectivity/src/bluetooth/osx/osxbtledeviceinquiry.mm
--- a/qtconnectivity/src/bluetooth/osx/osxbtledeviceinquiry.mm	2015-10-13 06:35:37.000000000 +0200
+++ b/qtconnectivity/src/bluetooth/osx/osxbtledeviceinquiry.mm	2017-08-25 17:43:21.000000000 +0200
@@ -211,8 +211,8 @@ using namespace QT_NAMESPACE;
         return;
     }
 
-    const CBCentralManagerState state = central.state;
-    if (state == CBCentralManagerStatePoweredOn) {
+    const CBManagerState state = central.state;
+    if (state == CBManagerStatePoweredOn) {
         if (pendingStart) {
             pendingStart = false;
             isActive = true;
@@ -224,7 +224,7 @@ using namespace QT_NAMESPACE;
             startTime = QTime::currentTime();
             [manager scanForPeripheralsWithServices:nil options:nil];
         } // Else we ignore.
-    } else if (state == CBCentralManagerStateUnsupported || state == CBCentralManagerStateUnauthorized) {
+    } else if (state == CBManagerStateUnsupported || state == CBManagerStateUnauthorized) {
         if (pendingStart) {
             pendingStart = false;
             delegate->LEnotSupported();
@@ -237,7 +237,7 @@ using namespace QT_NAMESPACE;
             [manager stopScan];
             delegate->LEdeviceInquiryError(QBluetoothDeviceDiscoveryAgent::PoweredOffError);
         }
-    } else if (state == CBCentralManagerStatePoweredOff) {
+    } else if (state == CBManagerStatePoweredOff) {
         if (pendingStart) {
             pendingStart = false;
             delegate->LEnotSupported();
@@ -296,7 +296,7 @@ using namespace QT_NAMESPACE;
     Q_ASSERT_X(delegate, Q_FUNC_INFO, "invalid delegate (null)");
 
 #if QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9, __IPHONE_6_0)
-    if (QSysInfo::MacintoshVersion >= qt_OS_limit(QSysInfo::MV_10_9, QSysInfo::MV_IOS_6_0)) {
+    {
         if (!peripheral.identifier) {
             qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "peripheral without NSUUID";
             return;
@@ -309,7 +309,7 @@ using namespace QT_NAMESPACE;
         }
         return;
     }
-#endif
+#else
     if (!peripheral.UUID) {
         qCWarning(QT_BT_OSX) << Q_FUNC_INFO << "peripheral without UUID";
         return;
@@ -321,6 +321,7 @@ using namespace QT_NAMESPACE;
         const QBluetoothUuid deviceUuid(OSXBluetooth::qt_uuid(peripheral.UUID));
         delegate->LEdeviceFound(peripheral, deviceUuid, advertisementData, RSSI);
     }
+#endif
 }
 
 - (bool)isActive
